name: citra-ci

on:
  push:
    branches: [ "*" ]
    tags: [ "*" ]
  pull_request:
    branches: [ master ]

jobs:
  clang-format:
    runs-on: ubuntu-latest
    container: 
      image: citraemu/build-environments:linux-clang-format
      options: -u 1001
    steps:
      - uses: actions/checkout@v3
        with: 
          fetch-depth: 0
      - name: Build
        env:
          COMMIT_RANGE: ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}
        run: ./.ci/linux-clang-format/docker.sh
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ["linux-fresh", "linux-frozen", "linux-mingw"]
    container:
      image: citraemu/build-environments:${{ matrix.image }}
      options: -u 1001
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-${{ matrix.image }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.image }}-
      - name: Query tag name
        uses: little-core-labs/get-git-tag@v3.0.2
        id: tagName
      - name: Build
        run: ./.ci/${{ matrix.image }}/docker.sh
        env:
          ENABLE_COMPATIBILITY_REPORTING: "ON"
      - name: Pack
        run: ./.ci/${{ matrix.image }}/upload.sh
        if: ${{ matrix.image != 'linux-frozen' }}
        env:
          NAME: ${{ matrix.image }}
      - name: Upload
        uses: actions/upload-artifact@v3
        if: ${{ matrix.image != 'linux-frozen' }}
        with:
          name: ${{ matrix.image }}
          path: artifacts/
  source:
    if: ${{ !github.head_ref }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Pack
        run: ./.ci/source/build.sh
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: source
          path: artifacts/
  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: ["x86_64", "arm64"]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: ~/Library/Caches/ccache
          key: ${{ runner.os }}-macos-${{ matrix.arch }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-macos-${{ matrix.arch }}-
      - name: Query tag name
        uses: little-core-labs/get-git-tag@v3.0.2
        id: tagName
      - name: Install dependencies
        run: ./.ci/macos/deps.sh
      - name: Build
        run: ./.ci/macos/build.sh
        env:
          MACOSX_DEPLOYMENT_TARGET: "11"
          ENABLE_COMPATIBILITY_REPORTING: "ON"
          TARGET_ARCH: ${{ matrix.arch }}
      - name: Pack
        run: ./.ci/macos/upload.sh
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: macos-${{ matrix.arch }}
          path: artifacts/
  macos-universal:
    runs-on: macos-latest
    needs: macos
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Query tag name
        uses: little-core-labs/get-git-tag@v3.0.2
        id: tagName
      - name: Download x86 build
        uses: actions/download-artifact@master
        with:
          name: macos-x86_64
          path: macos-x86_64/
      - name: Download ARM64 build
        uses: actions/download-artifact@master
        with:
          name: macos-arm64
          path: macos-arm64/
      - name: Create universal app
        run: ./.ci/macos/universal.sh
        env:
          ARTIFACTS: macos-x86_64 macos-arm64
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: macos
          path: artifacts/
      - name: Delete intermediate artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            macos-x86_64
            macos-arm64
  ios:
    runs-on: macos-latest
    strategy:
      matrix:
        configuration: ["Release", "RelWithDebInfo"]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install dependencies
        run: brew install glslang
      # Currently ccache is commented out since I don't know how to use it with Xcode + CMake
      # - name: Set up cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/Library/Caches/ccache
      #     key: ${{ runner.os }}-macos-${{ matrix.arch }}-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-macos-${{ matrix.arch }}-
      - name: Query tag name
        uses: little-core-labs/get-git-tag@v3.0.2
        id: tagName
      - name: Download MoltenVK
        run: |
          mkdir -p build/dependencies
          cd build/dependencies
          # https://github.com/KhronosGroup/MoltenVK/actions/runs/4496704187
          # TODO: we should not to depend nightly.link, use GH actions token instead
          # If this link was dead, i have a archive: https://web.archive.org/web/20230418172358/https://nightly.link/KhronosGroup/MoltenVK/suites/11749022866/artifacts/612167163
          # but most good choice is take from latest release's artifact https://github.com/KhronosGroup/MoltenVK/releases
          curl -Lo ios.zip https://nightly.link/KhronosGroup/MoltenVK/suites/11749022866/artifacts/612167163
          unzip ios.zip
          tar xf ios.tar
      - name: Build
        run: |
          ./build_ios.sh
          xcodebuild -configuration "${{ matrix.configuration }}" -scheme citra_ios -project build/ios/citra.xcodeproj CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO
          cd build/ios/bin/"${{ matrix.configuration }}"
          mkdir -p ipa/Payload
          cp -cr citra_ios.app ./ipa/Payload/citra_ios.app
          cd ipa
          codesign -f -s - ./Payload/citra_ios.app/Frameworks/*
          codesign -f -s - --entitlements ${{ github.workspace }}/src/citra_ios/resources/entitlements.plist ./Payload/citra_ios.app
          mkdir -p ${{ github.workspace }}/artifacts
          zip -r ${{ github.workspace }}/artifacts/citra_ios_ci_${{ github.run_id }}_${{ matrix.configuration }}_${{ github.sha }}.ipa .
        env:
          DEVELOPMENT_TEAM_ID: "-"
          BUNDLE_IDENTIFIER: net.rinsuki.slapps.citra.ci-artifact
          MOLTENVK_IOS_ARTIFACT: "${{ github.workspace }}/build/dependencies/Package/Release/MoltenVK"
          CITRA_IOS_NAME_SUFFIX: " (CI)"
          CITRA_IOS_SHORT_VERSION: ".gha.${{ github.run_id }}.${{ matrix.configuration }}.${{ github.sha }}"
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: ios-${{ matrix.configuration }}
          path: artifacts/
  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: ~/.buildcache
          key: ${{ runner.os }}-win-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-win-
      - name: Query tag name
        uses: little-core-labs/get-git-tag@v3.0.2
        id: tagName
      - name: Install dependencies
        run: ./.ci/windows-msvc/deps.sh
        shell: bash
      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
      - name: Setup Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: latest
          vulkan-components: Glslang
          vulkan-use-cache: true
      - name: Test glslangValidator
        run: glslangValidator --version
      - name: Build
        run: ./.ci/windows-msvc/build.sh
        shell: bash
        env:
          ENABLE_COMPATIBILITY_REPORTING: "ON"
      - name: Pack
        run: ./.ci/windows-msvc/upload.ps1
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: msvc
          path: artifacts/
  android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.ccache
          key: ${{ runner.os }}-android-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-android-
      - name: Query tag name
        uses: little-core-labs/get-git-tag@v3.0.2
        id: tagName
      - name: Deps
        run: |
          sudo apt-get update
          sudo apt-get install ccache apksigner -y
          sudo add-apt-repository -y ppa:savoury1/ffmpeg4
          sudo apt-get update -y
          sudo apt-get install --no-install-recommends -y glslang-dev glslang-tools
      - name: Build
        run: ./.ci/android/build.sh
      - name: Copy and sign artifacts
        env:
          ANDROID_KEYSTORE_B64: ${{ secrets.ANDROID_KEYSTORE_B64 }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEYSTORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASS }}
        run: ./.ci/android/upload.sh
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: android
          path: artifacts/
  transifex:
    runs-on: ubuntu-latest
    container: citraemu/build-environments:linux-transifex
    if: ${{ github.repository == 'citra-emu/citra' && !github.head_ref }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Update Translation
        run: ./.ci/transifex/docker.sh
        env:
          TRANSIFEX_API_TOKEN: ${{ secrets.TRANSIFEX_API_TOKEN }}
  release:
    runs-on: ubuntu-latest
    needs: [build, android, macos-universal, source, windows]
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/download-artifact@v3
      - name: Query tag name
        uses: little-core-labs/get-git-tag@v3.0.2
        id: tagName
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tagName.outputs.tag }}
          release_name: ${{ steps.tagName.outputs.tag }}
          draft: false
          prerelease: false
      - name: Upload artifacts
        uses: alexellis/upload-assets@0.2.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_paths: '["./**/*.tar.*","./**/*.7z","./**/*.zip","./**/*.apk","./**/*.aab"]'
